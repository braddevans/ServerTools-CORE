buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

plugins {
    id 'maven'
    id 'com.github.hierynomus.license' version '0.12.1'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.matthewprenger.cursegradle' version '1.0.7'
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = '3.0.0'
minecraft.version = '1.8.9-11.15.1.1764'
minecraft.mappings = 'snapshot_20160301'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile(group: 'ninja.leaping.configurate', name: 'configurate-hocon', version: '3.1.1') {
        exclude module: 'guava'
    }

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

if (System.getenv().'PROMOTED_NUMBER' != null) {
    version += ".${System.getenv().'PROMOTED_NUMBER'}"
} else if (System.getenv().'BUILD_NUMBER' != null) {
    version += ".${System.getenv().'BUILD_NUMBER'}"
} else {
    version += ".0"
}

def commonManifest = [
        'Built-By'              : System.properties['user.name'],
        'Created-By'            : "${System.properties['java.version']} (${System.properties['java.vendor']})",
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.version
]

jar {
    classifier = 'slim'
    manifest.attributes(commonManifest)
}

def repackPackage = 'info.servertools.repack'
shadowJar {
    classifier = '' // This is now the main jar
    relocate 'com.typesafe.config', "${repackPackage}.com.typesafe.config"
    relocate 'ninja.leaping.configurate', "${repackPackage}.ninja.leaping.configurate"

    manifest.attributes(commonManifest)
}

[jar, shadowJar, sourceJar]*.version = "$minecraft.version-$project.version"

reobf {
    shadowJar { mappingType = 'SEARGE' }
}

tasks.build.dependsOn reobfShadowJar

artifacts {
    archives shadowJar
}

processResources {

    from 'LICENSE'

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand([
                'version'     : project.version,
                'mcversion'   : project.minecraft.version,
                'url'         : project.url,
                'description' : project.description,
                'forgeversion': project.minecraft.forgeVersion
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

license {
    ext {
        name = project.name
        organization = project.organization
        year = project.inceptionYear
        url = project.url
    }
    include '**/*.java'
    header = file('HEADER.txt')
    sourceSets = project.sourceSets
    ignoreFailures = false
    strictCheck = true
    mapping { java = 'SLASHSTAR_STYLE' }
}

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
    task.options.fork = true
}

if (project.hasProperty('changelog')) {
    println "Changelog: $project.changelog"
}

curseforge {
    apiKey = project.hasProperty('curseApiKey') ? project.curseApiKey : ''
    project {
        id = '64744'
        changelog = ''
        releaseType = 'release'

        mainArtifact(shadowJar) {
            displayName = "ServerTools-CORE $project.version"
        }

        addArtifact sourceJar
    }
}

afterEvaluate {
    tasks.curseforge64744.dependsOn.remove(reobfJar)
    tasks.curseforge64744.dependsOn.remove(sourceJar)
    tasks.curseforge64744.dependsOn.remove(shadowJar)
}

uploadArchives {
    dependsOn build
    repositories.mavenDeployer {
        if (project.hasProperty('forgeMavenUser') && project.hasProperty('forgeMavenPass')) {
            repository(url: 'http://files.minecraftforge.net/maven/manage/upload') {
                authentication(userName: project.forgeMavenUser, password: project.forgeMavenPass)
            }
        } else {
            repository(url: "file://localhost/${project.file('repo').getAbsolutePath()}")
        }

        pom {
            groupId = project.group
            version = "$project.minecraft.version-$project.version"
            artifactId = project.name

            project {
                name = project.name
                packaging = 'jar'
                description = project.description
                url = project.url

                scm {
                    url = project.scm_url
                    connection = project.scm_connection
                    developerConnection = project.scm_developerConnection
                }

                issueManagement {
                    system = project.issues_system
                    url = project.issues_url
                }

                licenses {
                    license {
                        name 'The Apache License Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'matthewprenger'
                        name 'Matthew Prenger'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}
